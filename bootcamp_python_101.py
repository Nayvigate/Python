# -*- coding: utf-8 -*-
"""Bootcamp - Python 101.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PtJSROelIOrsV4_3YHBhlYWOwsoreKlW

# Essential Python 101

## Today we are learning Python 101 for beginners. 

- variables
- data types
- data structures
- function
- control flow
- OOP
"""

print("hello world")
print("the world is mine")

print("I'm leraning python 101") # Go

# Basic calculation
print(2 +2)
print(2 - 2)
print(4 / 2)
print(5 * 2)

print(7 // 2)
print(pow(5, 4))
print(abs(-234)) # absolute
print(5 % 2) # modula

# 5 building blocks
# 1. variables
# 2. data types
# 3. data structures
# 4. function
# 5. control flow
# 6. OOP

# variables
my_name = "nay"
age = 27
gpa = 3.28
dog_lover = True

print(my_name, my_name)
gpa

# over wirte a value
age = 27
new_age = age + 50
print(age, new_age)

iphone_price = 39990
discout = 0.2
new_iphone_price = iphone_price * (1-discout)
print(new_iphone_price)

# remove variable
del new_ihpone_price

# count variable
age = 27
age += 1
age -= 2
age *= 2
age /= 3
print(age)

# data types
age = 27 #int
gpa = 3.28 #float 
school = "Kasetsart" #str
dog_lover = True #bool

print( type(age))
print( type(gpa))
print( type(school))
print( type(dog_lover))

# convert type
x = 100
x = str(x)
print(x, type(x))

y = False # T=1, F=0
y = int(y)
print(y, type(y))

r = 1
r = bool(r)
print(r, type(r))

age = 27
print(age+age, age*2, age/2)

text = "what's up"
text2 = '"wowwwww"'
print(text, text2)

print(text*4)

# type hint
age: int = 27
my_name: str = "Nay"
gpa: float = 3.28
seafood: bool = True

# function
print("hello, world")
print(pow(5, 3), abs(-4))

#greeting()
def greeting(name="Nay", location="London"):
    print("Hello!", name)
    print("He is at", location)

greeting(location="Japan", name="Bob")

def add_two_nums(num1, num2, num3):
    print("the world")
    return num1 + num2 + num3

x = add_two_nums(15, 5, 6)
print(x)

# work with string
text = "Hello world"

long_text = """
this is a 
very long text
this is a new line"""

print(text)
print(long_text)

# string template : fstrings
my_name = "John"
location = "London"

text = f"Hi! my name is {my_name} and I live in {location}"

print(text)

text = "a duck walks into a bar"
print(text)

len(text)

# slicing, index start with 0
print(text[0], text[22], text[-1])

print(text[2:6])
print(text[7: ])
print(text[-3: ])

# string is immutable
name = "Python" # - > Cython
name = "C" + name[1: ]
print(name)

text = "a duck walks into a bar"
len(text)

# function vs. method
# string methods
text = text.upper()
print(text)

text.lower()

text.title()

text.replace("DUCK", "LION")

text.split(" ")

words = text.split(" ")
print(words, type(words))

" ".join(words)

# data structures
# 1. list []
# 2. tuple ()
# 3. dictionary {}
# 4. set {unique}

# list
shopping_item = ["banana", "eeg", "milk"]
print(shopping_item[0])
print(shopping_item[1])
print(shopping_item[2])
print(shopping_item[1:])
print(len(shopping_item))

shopping_item = ["banana", "eeg", "milk"]

shopping_item[0] = "pine apple"
shopping_item[1] = "cheese"

print(shopping_item)

# list methods
shopping_item.append("egg")
print(shopping_item)

# sort items (ascending order, A-Z)
shopping_item.sort()
print(shopping_item)

shopping_item.sort(reverse=True) # descending order
print(shopping_item)

# reuseable
def mean(scores):
    return sum(scores) / len(scores)

scores = [90, 88, 85, 92, 75]
print(len(scores), sum(scores), min(scores), max(scores), mean(scores))

# remove last item in list
shopping_item.pop()
print(shopping_item)

shopping_item.append("egg")
shopping_item

shopping_item.remove("milk")
shopping_item

# .insert()
shopping_item.insert(1, "milk")
shopping_item

# list + list
item1 = ["egg", "milk"]
item2 = ["banana", "bread"]

print(item1 + item2)

# tuple () is immutable
tup_items = ("egg", "bread", "pepsi", "egg", "egg")
tup_items

tup_items.count("egg")

# username password
# student1, student2
s1 = ("id001", "123456")
s2 = ("id002", "654321")

user_pw = (s1, s2)
print(user_pw)

# tuple unpacking
username, password = s1

print(username, password)

# tuple unpacking 3 values
name, age, _ = ("John", 38, 3.4)
print(name, age)

# set {unique}
courses = ["Python", "Python", "R", "SQL",]

set(courses)

# dictionary key: value pairs
course = {
    "name": "Data Science Bootcamp",
    "duration": "4 months",
    "students": 400,
    "replay": True,
    "skills": ["Google Sheets", "SQL", "R", "Python", "Stats", "ML", "Dashboard", "Data tranformation"]
}

course

course["name"]

course["start_time"] = "9am"

course["language"] = "Thai"

course

# delete
del course["start_time"]
course

# update data
course["replay"] = False
course

course["skills"][0:3]

course["skills"][-3:]

list( course.keys() )

list( course.values())

list( course.items() )

course.get("replay")

# Recap
# list, dictionary = mutable
# tuple, string = immutable

# control flow
# if for while

# final exam 150 questions, pass>=120
score = 125
if score >=120:
    print("passed")
else :
    print("failed")

def grade(score):
    if score >=120:
        return "passed"
    else :
        return "failed"

result = grade(119)
print(result)

def grade(score):
    if score >=120:
        return "Excellent"
    elif score >= 100:
        return "Good"
    elif score >= 80:
        return "Okay"
    else :
        return "Need to read more!"

result = grade(95)
print(result)

# use and, or in condition
# course == data science, score >= 80 passed
# course == english, score >=70 passed
def grade(course, score):
    if course == "data science" and score >= 80:
        return "passed"
    if course == "english" and score >= 70:
        return "passed"
    else :
        return "failed"

result = grade("english ", 60)
print(result)

# for loop
# if socre >= 80 passed
scores = [88, 90, 75]

for score in scores:
    print(score)

new_scores = []

for score in scores:
    new_scores.append(score-2)
print(new_scores)

def grading_all(scores):
    new_scores = []
    for score in scores:
        new_scores.append(score+2)
    return new_scores

grading_all([75, 88, 90, 95, 52])

# list comprehension
scores = [75, 88, 90, 95, 52]

for s in scores:
    print(s*2)

new_scores = [s*2 for s in scores]
new_scores

friends = ["toy", "ink", "bee", "zue", "yos"]
for f in friends:
    print(f.upper())

[f.upper() for f in friends]

# while loop
count = 0

while count < 5:
    print("hello")
    count += 1

# chatbot for fruit order
user_name = input("What is your name? ")

user_name

def chatbot():
    fruits = []
    while True:
        fruit = input("What fruit do you want to order? ")
        if fruit == "exit":
            return fruits
        fruits.append(fruit)

chatbot()

age = input("How old are you? ")

type(age)

age = int( input("How old are you? "))

type(age)

# OOP - Object Oriented Programming
# Dog class  __ # dunder

class Dog:
    def __init__(self, name, age, breed):
        self.name = name
        self.age = age
        self.breed = breed

dog1 = Dog("billy", 2, "chihuahua")
dog2 = Dog("van", 5, "golden retriver")
dog3 = Dog("smurf", 10, "bulldog")

print(dog3.name, dog3.age, dog3.breed)

class Employee:
    def __init__(self, id, name, dept, pos):
        self.id = id
        self.name = name
        self.dept = dept
        self.pos = pos

    def hello(self):
        print(f"Hello! my name is {self.name}")

    def work_hours(self, hours):
        print(f"{self.name} work for {hours} hours.")
        
    def change_dept(self, new_dept):
        self.dept = new_dept
        print(f"{self.name} is now in {self.dept}.")

emp1 = Employee(1, "John", "Finace", "Financial Analyst")

print(emp1.name, emp1.pos)

emp1.hello()

emp1.work_hours(10)

emp1.dept

emp1.change_dept("Marketing")

emp1.dept

# Object: attribute => name, id, dept, pos
# Object: method => hello(), change_dept()

# create new ATM class

class ATM:
    def __init__(self, name, bank, balance):
        self.name = name
        self.bank = bank
        self.balance = balance
    def deposit(self, amt):
        self.balance += amt
    def withdraw(self, amt):
        self.balance -= amt

scb = ATM("Nay", "scb", 500)

scb.balance

scb.deposit(100)

scb.balance

scb.withdraw(200)

scb.balance